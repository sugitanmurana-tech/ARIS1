name: multi-rdp-3

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    strategy:
      matrix:
        instance: [1, 2, 3]
    timeout-minutes: 360

    steps:
      - name: Configure Core RDP Settings
        shell: pwsh
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name 'fDenyTSConnections' -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name 'UserAuthentication' -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name 'SecurityLayer' -Value 0 -Force
          netsh advfirewall firewall delete rule name="RDP-Tailscale" | Out-Null
          netsh advfirewall firewall add rule name="RDP-Tailscale" dir=in action=allow protocol=TCP localport=3389

      - name: Create RDP User (fixed password)
        shell: pwsh
        run: |
          $password = "Aris.Net"
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force
          if (-not (Get-LocalUser -Name "RDP" -ErrorAction SilentlyContinue)) {
            New-LocalUser -Name "RDP" -Password $securePass -AccountNeverExpires
            Add-LocalGroupMember -Group "Administrators" -Member "RDP"
            Add-LocalGroupMember -Group "Remote Desktop Users" -Member "RDP"
          } else {
            # update password if user exists
            $u = Get-LocalUser -Name "RDP"
            $u | Set-LocalUser -Password $securePass
          }
          Write-Output "RDP_PASS=$password" >> $env:GITHUB_ENV

      - name: Install Tailscale
        shell: pwsh
        run: |
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-latest-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
          Start-Process msiexec.exe -ArgumentList "/i", $installerPath, "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force

      - name: Establish Tailscale Connection
        shell: pwsh
        env:
          TAILSCALE_AUTH_KEY: ${{ secrets.TAILSCALE_AUTH_KEY }}
        run: |
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=$env:TAILSCALE_AUTH_KEY --hostname=gh-runner-${{ matrix.instance }}-$env:GITHUB_RUN_ID
          $tsIP = $null
          $retries = 0
          while (-not $tsIP -and $retries -lt 12) {
            $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
            Start-Sleep -Seconds 5
            $retries++
          }
          if (-not $tsIP) {
            Write-Error "Tailscale IP not assigned. Exiting."
            exit 1
          }
          Write-Output "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV
          Write-Output "Tailscale IP for instance-${{ matrix.instance }}: $tsIP"

      - name: Verify RDP Accessibility
        shell: pwsh
        run: |
          Write-Output "Tailscale IP: $env:TAILSCALE_IP"
          $test = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389 -InformationLevel Detailed
          if (-not $test.TcpTestSucceeded) {
            Write-Error "TCP 3389 not reachable on $env:TAILSCALE_IP"
            exit 1
          }
          Write-Output "TCP connectivity successful!"

      - name: Save RDP info to file
        shell: pwsh
        run: |
          $out = @"
Address : $env:TAILSCALE_IP
Username: RDP
Password: $env:RDP_PASS
Instance: ${{ matrix.instance }}
"@
          $file = "$GITHUB_WORKSPACE\RDP-${{ matrix.instance }}.txt"
          Set-Content -Path $file -Value $out -Encoding UTF8
          Write-Output "Saved $file"

      - name: Upload RDP artifact
        uses: actions/upload-artifact@v3
        with:
          name: RDP-info-${{ matrix.instance }}
          path: RDP-${{ matrix.instance }}.txt

      - name: Maintain Connection
        shell: pwsh
        run: |
          Write-Output "`n=== RDP ACCESS ==="
          Write-Output "Address  : $env:TAILSCALE_IP"
          Write-Output "Username : RDP"
          Write-Output "Password : $env:RDP_PASS"
          Write-Output "===================`n"
          while ($true) {
            Write-Output "[$(Get-Date)] RDP instance-${{ matrix.instance }} Active - workflow masih jalan..."
            Start-Sleep -Seconds 300
          }
